{"ast":null,"code":"var _jsxFileName = \"/Users/kumiko/projectA/applepiecoffeecake/web-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { questionMap } from './questionMap.js';\nimport { useState, Fragment } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App(props) {\n  _s();\n\n  const {\n    questionNum\n  } = props;\n  const questionList = questionMap[questionNum];\n  const blankPositions = [];\n  questionList.forEach(line => {\n    const start = line.indexOf(\"___\");\n    blankPositions.push([start, start + 2]);\n  });\n\n  const getInitInputs = () => {\n    let initInputs = {};\n    questionList.forEach((_, i) => {\n      initInputs[i] = \"\";\n    });\n  };\n\n  const [inputs, setInputs] = useState(getInitInputs());\n\n  const inputOnChange = (event, i) => {\n    let newInputs = { ...inputs\n    };\n    newInputs[i] = event.target.value;\n    setInputs(newInputs);\n  };\n\n  const questionListDOM = questionList.map((line, i) => /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [line.substring(0, blankPositions[i][0]), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: inputs[i],\n      onChange: event => inputOnChange(event, i),\n      className: \"line-input\",\n      placeholder: \"______\",\n      size: inputs[i] ? inputs[i].length : 5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), line.substring(blankPositions[i][1] + 1, line.length), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 60\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this));\n\n  const getLines = () => {\n    let output = \"\";\n    questionList.forEach((line, i) => {\n      output += line.replace(\"___\", inputs[i] || \"___\");\n\n      if (i !== questionList.length - 1) {\n        output += \"\\n\";\n      }\n    });\n    return output;\n  };\n\n  const copyLines = () => {\n    navigator.clipboard.writeText(getLines());\n    console.log(\"clicked on copy\", getLines());\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [questionNum, \" is the questionNum.\", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"lines\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"fillin\",\n        children: \"Fill in the blank.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), questionListDOM]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"action\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"button\",\n        onClick: copyLines,\n        children: \"copy my lines\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"footer\",\n      children: \"\\xA9 2021 Kumiko Kashii\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"wQK6+kVEhk49vFLdV/bJN46lJEM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/kumiko/projectA/applepiecoffeecake/web-app/src/App.js"],"names":["questionMap","useState","Fragment","App","props","questionNum","questionList","blankPositions","forEach","line","start","indexOf","push","getInitInputs","initInputs","_","i","inputs","setInputs","inputOnChange","event","newInputs","target","value","questionListDOM","map","substring","length","getLines","output","replace","copyLines","navigator","clipboard","writeText","console","log"],"mappings":"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","sourcesContent":["import './App.css';\nimport {questionMap} from './questionMap.js';\nimport { useState, Fragment } from 'react';\n\nfunction App(props) {\n  const { questionNum } = props;\n  const questionList = questionMap[questionNum];\n  const blankPositions = [];\n  questionList.forEach((line) => {\n    const start = line.indexOf(\"___\");\n    blankPositions.push([start, start+2]);\n  })\n\n  const getInitInputs = () => {\n    let initInputs = {};\n    questionList.forEach((_, i) => {\n      initInputs[i] = \"\";\n    })\n    \n  }\n  const [inputs, setInputs] = useState(getInitInputs());\n  const inputOnChange = (event, i) => {\n    let newInputs = {...inputs};\n    newInputs[i] = event.target.value;\n    setInputs(newInputs);\n  }\n\n  const questionListDOM = questionList.map((line, i) =>\n    <Fragment>\n      {line.substring(0, blankPositions[i][0])}\n      <input\n        value={inputs[i]}\n        onChange={(event) => inputOnChange(event, i)}\n        className=\"line-input\"\n        placeholder=\"______\"\n        size={inputs[i] ? inputs[i].length : 5}\n      />\n      {line.substring(blankPositions[i][1]+1, line.length)}<br/>\n    </Fragment> \n  )\n\n  const getLines = () => {\n    let output = \"\"\n    questionList.forEach((line, i) => {\n      output += line.replace(\"___\", inputs[i] || \"___\");\n      if (i !== questionList.length-1) {\n        output += \"\\n\"\n      }\n    })\n    return output;\n  }\n\n  const copyLines = () => {\n    navigator.clipboard.writeText(getLines());\n    console.log(\"clicked on copy\", getLines());\n  }\n\n  return (\n    <div className=\"App\">\n      {questionNum} is the questionNum.\n\n      <div className=\"lines\">\n        <span className=\"fillin\">Fill in the blank.</span>\n        {questionListDOM}\n      </div>\n      <div className=\"action\">\n        <span className=\"button\" onClick={copyLines}>copy my lines</span>\n      </div>\n      <div className=\"footer\">\n        &copy; 2021 Kumiko Kashii\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}