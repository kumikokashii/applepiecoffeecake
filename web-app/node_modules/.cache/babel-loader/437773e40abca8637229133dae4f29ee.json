{"ast":null,"code":"var _jsxFileName = \"/Users/kumiko/projectA/applepiecoffeecake/web-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { questionMap } from './questionMap.js';\nimport { useState, Fragment, useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App(props) {\n  _s();\n\n  const inputRef = useRef(null);\n  const [inputs, setInputs] = useState({});\n  const [inputWidth, setInputWidth] = useState(\"3ch\");\n  useEffect(() => {\n    setInputWidth(inputs[0]);\n  }, [inputs]);\n  const {\n    questionNum\n  } = props;\n  const questionList = questionMap[questionNum];\n\n  const inputOnChange = (event, i) => {\n    let newInputs = { ...inputs\n    };\n    newInputs[i] = event.target.value;\n    setInputs(newInputs);\n    console.log(newInputs[i].length, newInputs[i]);\n  };\n\n  const inputStyle = {\n    width: \"10ch\"\n  };\n  const questionListDOM = questionList.map((line, i) => /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [line, /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: inputRef,\n      style: inputStyle,\n      value: inputs[i],\n      onChange: (event, i) => inputOnChange(event, i),\n      className: \"line-input\",\n      placeholder: \"______\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), \".\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this));\n\n  const copyLines = () => {\n    console.log(\"clicked on copy\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [questionNum, \" is the questionNum.\", /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"lines\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        class: \"fillin\",\n        children: \"Fill in the blank.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), questionListDOM]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"action\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        class: \"button\",\n        onClick: copyLines,\n        children: \"copy my lines\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"footer\",\n      children: \"\\xA9 2021 Kumiko Kashii\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"eUW/X2lXonqvBc0jMAMGSkQv8Kk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/kumiko/projectA/applepiecoffeecake/web-app/src/App.js"],"names":["questionMap","useState","Fragment","useRef","useEffect","App","props","inputRef","inputs","setInputs","inputWidth","setInputWidth","questionNum","questionList","inputOnChange","event","i","newInputs","target","value","console","log","length","inputStyle","width","questionListDOM","map","line","copyLines"],"mappings":";;;AAAA,OAAO,WAAP;AACA,SAAQA,WAAR,QAA0B,kBAA1B;AACA,SAASC,QAAT,EAAmBC,QAAnB,EAA6BC,MAA7B,EAAqCC,SAArC,QAAsD,OAAtD;;;AAEA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAAA;;AAClB,QAAMC,QAAQ,GAAGJ,MAAM,CAAC,IAAD,CAAvB;AACA,QAAM,CAACK,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC;AAEA,QAAM,CAACS,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,KAAD,CAA5C;AACAG,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,aAAa,CAACH,MAAM,CAAC,CAAD,CAAP,CAAb;AACD,GAFQ,EAEN,CAACA,MAAD,CAFM,CAAT;AAIA,QAAM;AAAEI,IAAAA;AAAF,MAAkBN,KAAxB;AACA,QAAMO,YAAY,GAAGb,WAAW,CAACY,WAAD,CAAhC;;AAGA,QAAME,aAAa,GAAG,CAACC,KAAD,EAAQC,CAAR,KAAc;AAClC,QAAIC,SAAS,GAAG,EAAC,GAAGT;AAAJ,KAAhB;AACAS,IAAAA,SAAS,CAACD,CAAD,CAAT,GAAeD,KAAK,CAACG,MAAN,CAAaC,KAA5B;AACAV,IAAAA,SAAS,CAACQ,SAAD,CAAT;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYJ,SAAS,CAACD,CAAD,CAAT,CAAaM,MAAzB,EAAiCL,SAAS,CAACD,CAAD,CAA1C;AACD,GALD;;AAOA,QAAMO,UAAU,GAAG;AACjBC,IAAAA,KAAK,EAAE;AADU,GAAnB;AAIA,QAAMC,eAAe,GAAGZ,YAAY,CAACa,GAAb,CAAiB,CAACC,IAAD,EAAOX,CAAP,kBACvC,QAAC,QAAD;AAAA,eACGW,IADH,eAEE;AACE,MAAA,GAAG,EAAEpB,QADP;AAEE,MAAA,KAAK,EAAEgB,UAFT;AAGE,MAAA,KAAK,EAAEf,MAAM,CAACQ,CAAD,CAHf;AAIE,MAAA,QAAQ,EAAE,CAACD,KAAD,EAAQC,CAAR,KAAcF,aAAa,CAACC,KAAD,EAAQC,CAAR,CAJvC;AAKE,MAAA,SAAS,EAAC,YALZ;AAME,MAAA,WAAW,EAAC;AANd;AAAA;AAAA;AAAA;AAAA,YAFF,oBAUG;AAAA;AAAA;AAAA;AAAA,YAVH;AAAA;AAAA;AAAA;AAAA;AAAA,UADsB,CAAxB;;AAeA,QAAMY,SAAS,GAAG,MAAM;AACtBR,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACD,GAFD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,eACGT,WADH,uCAGE;AAAK,MAAA,KAAK,EAAC,OAAX;AAAA,8BACE;AAAM,QAAA,KAAK,EAAC,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEGa,eAFH;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAOE;AAAK,MAAA,KAAK,EAAC,QAAX;AAAA,6BACE;AAAM,QAAA,KAAK,EAAC,QAAZ;AAAqB,QAAA,OAAO,EAAEG,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAPF,eAUE;AAAK,MAAA,KAAK,EAAC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GA3DQvB,G;;KAAAA,G;AA6DT,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport {questionMap} from './questionMap.js';\nimport { useState, Fragment, useRef, useEffect } from 'react';\n\nfunction App(props) {\n  const inputRef = useRef(null);\n  const [inputs, setInputs] = useState({});\n\n  const [inputWidth, setInputWidth] = useState(\"3ch\");\n  useEffect(() => {\n    setInputWidth(inputs[0]);\n  }, [inputs])\n\n  const { questionNum } = props;\n  const questionList = questionMap[questionNum];\n\n\n  const inputOnChange = (event, i) => {\n    let newInputs = {...inputs};\n    newInputs[i] = event.target.value;\n    setInputs(newInputs);\n    console.log(newInputs[i].length, newInputs[i])\n  }\n\n  const inputStyle = {\n    width: \"10ch\"\n  }\n\n  const questionListDOM = questionList.map((line, i) =>\n    <Fragment>\n      {line} \n      <input\n        ref={inputRef}\n        style={inputStyle}\n        value={inputs[i]}\n        onChange={(event, i) => inputOnChange(event, i)}\n        className=\"line-input\"\n        placeholder=\"______\"\n      />\n      .<br/>\n    </Fragment> \n  )\n\n  const copyLines = () => {\n    console.log(\"clicked on copy\");\n  }\n\n  return (\n    <div className=\"App\">\n      {questionNum} is the questionNum.\n\n      <div class=\"lines\">\n        <span class=\"fillin\">Fill in the blank.</span>\n        {questionListDOM}\n      </div>\n      <div class=\"action\">\n        <span class=\"button\" onClick={copyLines}>copy my lines</span>\n      </div>\n      <div class=\"footer\">\n        &copy; 2021 Kumiko Kashii\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}