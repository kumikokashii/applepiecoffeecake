{"ast":null,"code":"var _jsxFileName = \"/Users/kumiko/projectA/applepiecoffeecake/web-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useState, Fragment } from 'react';\nimport { questionMap } from './questionMap.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App(props) {\n  _s();\n\n  const {\n    questionNum\n  } = props;\n  const questionList = questionMap[questionNum];\n  const blankPositions = [];\n  questionList.forEach(line => {\n    const start = line.indexOf(\"___\");\n    blankPositions.push([start, start + 2]);\n  });\n  console.log(\"blankPositions:\", blankPositions);\n  const [buttonClicked, setButtonClicked] = useState(false);\n  let initInputs = {};\n  questionList.forEach((_, i) => {\n    initInputs[i] = \"\";\n  });\n  const [inputs, setInputs] = useState(initInputs);\n\n  const inputOnChange = (event, i) => {\n    let newInputs = { ...inputs\n    };\n    newInputs[i] = event.target.value;\n    setInputs(newInputs);\n  };\n\n  const questionListDOM = questionList.map((line, i) => blankPositions[i][0] === -1 ? /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [line, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 51\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 35\n  }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [line.substring(0, blankPositions[i][0]), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: inputs[i],\n      onChange: event => inputOnChange(event, i),\n      className: \"line-input\",\n      placeholder: \"______\",\n      size: inputs[i].length || 5\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this), line.substring(blankPositions[i][1] + 1, line.length), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 7\n  }, this));\n\n  const getLines = () => {\n    let output = \"\";\n    questionList.forEach((line, i) => {\n      output += line.replace(\"___\", inputs[i] || \"___\");\n\n      if (i !== questionList.length - 1) {\n        output += \"\\n\";\n      }\n    });\n    return output;\n  };\n\n  const copyLines = () => {\n    setButtonClicked(true);\n    setTimeout(() => setButtonClicked(false), 1000);\n    navigator.clipboard.writeText(getLines());\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fillin\",\n      children: \"Fill in the blank.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"lines\",\n      children: questionListDOM\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"button\" + (buttonClicked ? \" buttonClicked\" : \"\"),\n      onClick: copyLines,\n      children: buttonClicked ? \"copied\" : \"copy my lines\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"footer\",\n      children: \"\\xA9 2021 Kumiko Kashii\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"LQjBptN4L11mF4n8a4grgFclADg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/kumiko/projectA/applepiecoffeecake/web-app/src/App.js"],"names":["useState","Fragment","questionMap","App","props","questionNum","questionList","blankPositions","forEach","line","start","indexOf","push","console","log","buttonClicked","setButtonClicked","initInputs","_","i","inputs","setInputs","inputOnChange","event","newInputs","target","value","questionListDOM","map","substring","length","getLines","output","replace","copyLines","setTimeout","navigator","clipboard","writeText"],"mappings":"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","sourcesContent":["import './App.css';\nimport { useState, Fragment } from 'react';\nimport {questionMap} from './questionMap.js';\n\nfunction App(props) {\n  const { questionNum } = props;\n  const questionList = questionMap[questionNum];\n\n  const blankPositions = [];\n  questionList.forEach((line) => {\n    const start = line.indexOf(\"___\");\n    blankPositions.push([start, start+2]);\n  })\n\n  console.log(\"blankPositions:\", blankPositions);\n\n  const [buttonClicked, setButtonClicked] = useState(false);\n  \n  \n\n  let initInputs = {};\n  questionList.forEach((_, i) => {\n    initInputs[i] = \"\";\n  })\n\n  const [inputs, setInputs] = useState(initInputs);\n\n  const inputOnChange = (event, i) => {\n    let newInputs = {...inputs};\n    newInputs[i] = event.target.value;\n    setInputs(newInputs);\n  }\n\n  const questionListDOM = questionList.map((line, i) =>\n    blankPositions[i][0] === -1 ? <Fragment>{line}<br/></Fragment> : (\n      <Fragment>\n        {line.substring(0, blankPositions[i][0])}\n        <input\n          key={i}\n          value={inputs[i]}\n          onChange={(event) => inputOnChange(event, i)}\n          className=\"line-input\"\n          placeholder=\"______\"\n          size={inputs[i].length || 5}\n        />\n        {line.substring(blankPositions[i][1]+1, line.length)}\n        <br/>\n      </Fragment>\n    )\n  )\n\n  const getLines = () => {\n    let output = \"\"\n    questionList.forEach((line, i) => {\n      output += line.replace(\"___\", inputs[i] || \"___\");\n      if (i !== questionList.length-1) {\n        output += \"\\n\"\n      }\n    })\n    return output;\n  }\n\n  const copyLines = () => {\n    setButtonClicked(true);\n    setTimeout(() => setButtonClicked(false), 1000);\n    navigator.clipboard.writeText(getLines());\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"fillin\">Fill in the blank.</div>\n      <div className=\"lines\">{questionListDOM}</div>\n      <span \n          className={\"button\" + (buttonClicked ? \" buttonClicked\" : \"\")}\n          onClick={copyLines}\n      >\n        {buttonClicked ? \"copied\" : \"copy my lines\"}\n      </span>\n      <div className=\"footer\">&copy; 2021 Kumiko Kashii</div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}