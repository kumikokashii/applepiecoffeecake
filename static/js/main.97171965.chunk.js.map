{"version":3,"sources":["questionMap.js","App.js","index.js"],"names":["questionMap","0","1","2","App","props","questionNum","questionList","blankPositions","map","line","start","indexOf","initInputs","forEach","_","i","useState","inputs","setInputs","buttonClicked","setButtonClicked","questionListDOM","substring","value","onChange","event","newInputs","target","inputOnChange","className","placeholder","size","length","copyButtonDOM","onClick","setTimeout","lines","replace","join","navigator","clipboard","writeText","year","Date","getFullYear","ReactDOM","render","Math","floor","random","document","getElementById"],"mappings":"4MAAaA,G,MAAc,CACzBC,EAAG,CACD,eACA,yBACA,oBAGFC,EAAG,CACD,6BACA,2BACA,2BAGFC,EAAG,CACD,4BACA,4BACA,+B,OCyDWC,MArEf,SAAaC,GAAQ,IACXC,EAAgBD,EAAhBC,YACFC,EAAeP,EAAYM,GAC3BE,EAAiBD,EAAaE,KAAI,SAACC,GACvC,IAAMC,EAAQD,EAAKE,QAAQ,OAC3B,MAAO,CAACD,EAAOA,EAAM,MAGnBE,EAAa,GACjBN,EAAaO,SAAQ,SAACC,EAAGC,GACvBH,EAAWG,GAAK,MAVA,MAaUC,mBAASJ,GAbnB,mBAaXK,EAbW,KAaHC,EAbG,OAcwBF,oBAAS,GAdjC,mBAcXG,EAdW,KAcIC,EAdJ,KAsBZC,EAAkBf,EAAaE,KAAI,SAACC,EAAMM,GAAP,OACb,IAA1BR,EAAeQ,GAAG,GAAY,eAAC,WAAD,WAAWN,EAAK,0BAC5C,eAAC,WAAD,WACGA,EAAKa,UAAU,EAAGf,EAAeQ,GAAG,IACrC,uBAEEQ,MAAON,EAAOF,GACdS,SAAU,SAACC,GAAD,OAbI,SAACA,EAAOV,GAC5B,IAAIW,EAAS,eAAOT,GACpBS,EAAUX,GAAKU,EAAME,OAAOJ,MAC5BL,EAAUQ,GAUiBE,CAAcH,EAAOV,IAC1Cc,UAAU,aACVC,YAAY,SACZC,KAAMd,EAAOF,GAAGiB,QAAU,GALrBjB,GAONN,EAAKa,UAAUf,EAAeQ,GAAG,GAAG,EAAGN,EAAKuB,QAC7C,6BAaAC,EACJ,sBACEJ,UAAW,UAAYV,EAAgB,iBAAmB,IAC1De,QAXc,WAChBd,GAAiB,GACjBe,YAAW,kBAAMf,GAAiB,KAAQ,KAE1C,IAAMgB,EAAQ9B,EAAaE,KAAI,SAACC,EAAMM,GAAP,OAAaN,EAAK4B,QAAQ,MAAOpB,EAAOF,IAAM,UAAQuB,KAAK,MAC1FC,UAAUC,UAAUC,UAAUL,IAI9B,SAIGjB,EAAgB,SAAW,kBAI1BuB,GAAO,IAAIC,MAAOC,cAExB,OACE,sBAAKf,UAAU,MAAf,UACE,qBAAKA,UAAU,SAAf,gCACA,qBAAKA,UAAU,QAAf,SAAwBR,IACvBY,EACD,sBAAKJ,UAAU,SAAf,kBAAgCa,EAAhC,kBC5DNG,IAASC,OACP,cAAC,EAAD,CAAKzC,YAJE0C,KAAKC,MAAsB,EAAhBD,KAAKE,YAKvBC,SAASC,eAAe,W","file":"static/js/main.97171965.chunk.js","sourcesContent":["export const questionMap = {\n  0: [\n    \"This is ___.\",\n    \"Coffee ___ is awesome.\",\n    \"___ is lalala...\",\n  ],\n\n  1: [\n    'This question 1 is so ___.',\n    'Everyone ___ about that.',\n    'She said, \"Tell me ___\"',\n  ],\n\n  2: [\n    \"this is question 2 line 1\",\n    \"this is question 2 line 2\",\n    \"this is question 2 line 3\",\n  ],\n}\n","import './App.css';\nimport { useState, Fragment } from 'react';\nimport {questionMap} from './questionMap.js';\n\nfunction App(props) {\n  const { questionNum } = props;\n  const questionList = questionMap[questionNum];\n  const blankPositions = questionList.map((line) => {\n    const start = line.indexOf(\"___\");\n    return [start, start+2];\n  })\n\n  let initInputs = {};\n  questionList.forEach((_, i) => {\n    initInputs[i] = \"\";\n  })\n\n  const [inputs, setInputs] = useState(initInputs);\n  const [buttonClicked, setButtonClicked] = useState(false);\n  \n  const inputOnChange = (event, i) => {\n    let newInputs = {...inputs};\n    newInputs[i] = event.target.value;\n    setInputs(newInputs);\n  }\n\n  const questionListDOM = questionList.map((line, i) =>\n    blankPositions[i][0] === -1 ? <Fragment>{line}<br/></Fragment> : (\n      <Fragment>\n        {line.substring(0, blankPositions[i][0])}\n        <input\n          key={i}\n          value={inputs[i]}\n          onChange={(event) => inputOnChange(event, i)}\n          className=\"line-input\"\n          placeholder=\"______\"\n          size={inputs[i].length || 5}\n        />\n        {line.substring(blankPositions[i][1]+1, line.length)}\n        <br/>\n      </Fragment>\n    )\n  )\n\n  const copyLines = () => {\n    setButtonClicked(true);\n    setTimeout(() => setButtonClicked(false), 1000);\n\n    const lines = questionList.map((line, i) => line.replace(\"___\", inputs[i] || \"___\")).join(\"\\n\");    \n    navigator.clipboard.writeText(lines);\n  }\n\n  const copyButtonDOM = (\n    <span \n      className={\"button\" + (buttonClicked ? \" buttonClicked\" : \"\")}\n      onClick={copyLines}\n    >\n      {buttonClicked ? \"copied\" : \"copy my lines\"}\n    </span>\n  )\n\n  const year = new Date().getFullYear();\n\n  return (\n    <div className=\"App\">\n      <div className=\"fillin\">Fill in the blank.</div>\n      <div className=\"lines\">{questionListDOM}</div>\n      {copyButtonDOM}\n      <div className=\"footer\">&copy; {year} Testing</div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nconst getRandomQuestionNumber = () => {\n  return Math.floor(Math.random() * 3);\n}\n\nReactDOM.render(\n  <App questionNum={getRandomQuestionNumber()} />,\n  document.getElementById('root')\n);"],"sourceRoot":""}