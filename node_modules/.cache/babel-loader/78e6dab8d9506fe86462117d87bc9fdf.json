{"ast":null,"code":"var _jsxFileName = \"/Users/kumiko/projectA/applepiecoffeecake/web-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useState, Fragment } from 'react';\nimport { questionMap } from './questionMap.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App(props) {\n  _s();\n\n  const {\n    questionNum\n  } = props;\n  const questionList = questionMap[questionNum];\n  const blankPositions = questionList.map(line => {\n    const start = line.indexOf(\"___\");\n    return [start, start + 2];\n  });\n  let initInputs = {};\n  questionList.forEach((_, i) => {\n    initInputs[i] = \"\";\n  });\n  const [inputs, setInputs] = useState(initInputs);\n  const [buttonClicked, setButtonClicked] = useState(false);\n\n  const inputOnChange = (event, i) => {\n    let newInputs = { ...inputs\n    };\n    newInputs[i] = event.target.value;\n    setInputs(newInputs);\n  };\n\n  const questionListDOM = questionList.map((line, i) => blankPositions[i][0] === -1 ? /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [line, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 51\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 35\n  }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [line.substring(0, blankPositions[i][0]), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: inputs[i],\n      onChange: event => inputOnChange(event, i),\n      className: \"line-input\",\n      placeholder: \"______\",\n      size: inputs[i].length || 5\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this), line.substring(blankPositions[i][1] + 1, line.length), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 7\n  }, this));\n\n  const copyLines = () => {\n    setButtonClicked(true);\n    setTimeout(() => setButtonClicked(false), 1000);\n    const lines = questionList.map((line, i) => line.replace(\"___\", inputs[i] || \"___\")).join(\"\\n\");\n    navigator.clipboard.writeText(lines);\n  };\n\n  const copyButtonDOM = /*#__PURE__*/_jsxDEV(\"span\", {\n    className: \"button\" + (buttonClicked ? \" buttonClicked\" : \"\"),\n    onClick: copyLines,\n    children: buttonClicked ? \"copied\" : \"copy my lines\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n\n  const year = new Date().getFullYear();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fillin\",\n      children: \"Fill in the blank.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"lines\",\n      children: questionListDOM\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), copyButtonDOM, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"footer\",\n      children: \"\\xA9 2021 Kumiko Kashii\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"f583okp0pAQ6KNV/HeCY6rHBGp0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/kumiko/projectA/applepiecoffeecake/web-app/src/App.js"],"names":["useState","Fragment","questionMap","App","props","questionNum","questionList","blankPositions","map","line","start","indexOf","initInputs","forEach","_","i","inputs","setInputs","buttonClicked","setButtonClicked","inputOnChange","event","newInputs","target","value","questionListDOM","substring","length","copyLines","setTimeout","lines","replace","join","navigator","clipboard","writeText","copyButtonDOM","year","Date","getFullYear"],"mappings":"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","sourcesContent":["import './App.css';\nimport { useState, Fragment } from 'react';\nimport {questionMap} from './questionMap.js';\n\nfunction App(props) {\n  const { questionNum } = props;\n  const questionList = questionMap[questionNum];\n  const blankPositions = questionList.map((line) => {\n    const start = line.indexOf(\"___\");\n    return [start, start+2];\n  })\n\n  let initInputs = {};\n  questionList.forEach((_, i) => {\n    initInputs[i] = \"\";\n  })\n\n  const [inputs, setInputs] = useState(initInputs);\n  const [buttonClicked, setButtonClicked] = useState(false);\n  \n  const inputOnChange = (event, i) => {\n    let newInputs = {...inputs};\n    newInputs[i] = event.target.value;\n    setInputs(newInputs);\n  }\n\n  const questionListDOM = questionList.map((line, i) =>\n    blankPositions[i][0] === -1 ? <Fragment>{line}<br/></Fragment> : (\n      <Fragment>\n        {line.substring(0, blankPositions[i][0])}\n        <input\n          key={i}\n          value={inputs[i]}\n          onChange={(event) => inputOnChange(event, i)}\n          className=\"line-input\"\n          placeholder=\"______\"\n          size={inputs[i].length || 5}\n        />\n        {line.substring(blankPositions[i][1]+1, line.length)}\n        <br/>\n      </Fragment>\n    )\n  )\n\n  const copyLines = () => {\n    setButtonClicked(true);\n    setTimeout(() => setButtonClicked(false), 1000);\n\n    const lines = questionList.map((line, i) => line.replace(\"___\", inputs[i] || \"___\")).join(\"\\n\");    \n    navigator.clipboard.writeText(lines);\n  }\n\n  const copyButtonDOM = (\n    <span \n      className={\"button\" + (buttonClicked ? \" buttonClicked\" : \"\")}\n      onClick={copyLines}\n    >\n      {buttonClicked ? \"copied\" : \"copy my lines\"}\n    </span>\n  )\n\n  const year = new Date().getFullYear()\n\n  return (\n    <div className=\"App\">\n      <div className=\"fillin\">Fill in the blank.</div>\n      <div className=\"lines\">{questionListDOM}</div>\n      {copyButtonDOM}\n      <div className=\"footer\">&copy; 2021 Kumiko Kashii</div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}